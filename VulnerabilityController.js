//VulnerabilityController.js

var express = require('express');
var router = express.Router();
var bodyParser = require('body-parser');
var authMiddleware = require('./authMiddleware');

router.use(bodyParser.urlencoded({extended: true}));
router.use(bodyParser.json());
var Host = require('./schema/Host');

router.post('/:ip/:port', authMiddleware.isAuthenticated(), authMiddleware.hasRole('hacker'), function(req, res) {
	Host.findOne({ip: req.params.ip}, function(err, host) {
		if(err) return res.status(300).send("{'error': 'There was a problem finding the host'}");
		if(!host) return res.status(404).send("{'error': 'no team found'}");
		for(var i = 0; i<host.openPorts.length; i++) {
			if(host.openPorts[i].port == req.params.port) {
				host.openPorts[i].vulnerabilities.push({
					vulnerability: req.body.vulnerability,
					notes: req.body.notes,
					severity: req.body.severity,
					user: req.session.user.handle }
					);
				host.save();
				console.log(req.session);
				res.status(200).send("{'status': 'ok'}");
				return;
			}
		}
		res.status(404).send("{'error': 'port not found'}");
	});h
});

router.put('/:ip/:port/:vuln', authMiddleware.isAuthenticated(), authMiddleware.hasRole("hacker"), function(req, res) {
	if(typeof(req.body.detected !== 'undefined') || typeof(req.body.current !== 'undefined')) {
		Host.findOne({ip: req.params.ip}, function(err, host) {
			if(err) return res.status(300).send("{'error': 'There was a problem finding the host'}");
			if(!host) return res.status(404).send("{'error': 'no team found'}");
			for(var i = 0; i<host.openPorts.length; i++) {
				if(host.openPorts[i].port == req.params.port) {
					for(var j = 0; j < host.openPorts[i].vulnerabilities.length; j++) {
						if(host.openPorts[i].vulnerabilities[j]._id == req.params.vuln) {
							console.log("found vuln");
							console.log(req.body);
							console.log(req.body.foo);
							if(typeof(req.body.detected) !== "undefined") {
								host.openPorts[i].vulnerabilities[j].detected = req.body.detected;
							}
							else {
								host.openPorts[i].vulnerabilities[j].current = req.body.current;
							}
							host.save();
							res.status(200).send({status: "ok"});
							return;
						}
					}
					/*
					host.openPorts[i].vulnerabilities.push({
						vulnerability: req.body.vulnerability,
						notes: req.body.notes,
						severity: req.body.severity,
						user: req.session.user.handle }
						);
					host.save();
					res.status(200).send("{'status': 'ok'}");
					return;
					*/
				}
			}
			res.status(404).send("{'error': 'port not found'}");
		});
	}
	else {
		Response.status(400).send({"error": "unknown field"});
	}
});

router.get('/', authMiddleware.isAuthenticated(), authMiddleware.hasRole('view'), function(req, res) {
	Host.find({}, function (err, hosts) {
		vulns = hosts.map(host => {
			hostVulns = host.openPorts.map(port => {
				
				//console.log(port);
				//console.log(port.vulnerabilities.length);
				port.vulnerabilities.reduce((acc, vuln) => {
					vuln['port'] = port.port;
					console.log(vuln);
				}, []);

				return {
					port: port.port,
					vulnerabilities: port.vulnerabilities
				}
				
				/*
				portvulns = port.vulnerabilities.reduce((acc, vuln) => {
					vuln['port'] = port.port
				}, [])
				return portvulns;
				*/
			})
			.filter(port => port.vulnerabilities.length > 0);
			return {
				host: host.ip,
				team: host.team,
				ports: hostVulns
			}
		})
		.filter(host => host.ports.length > 0);
		res.status(200).send(vulns);
		
	});
});

module.exports = router;