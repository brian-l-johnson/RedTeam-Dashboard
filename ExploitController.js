//ExploitController.js

var express = require('express');
var router = express.Router();
var bodyParser = require('body-parser');
var authMiddleware = require('./authMiddleware');

router.use(bodyParser.urlencoded({extended: true}));
router.use(bodyParser.json());
var Exploit = require('./schema/Exploit');
var ExploitRule = require('./schema/ExploitRule')


router.post('/', authMiddleware.isAuthenticated(), authMiddleware.hasRole('hacker'), function(req, res) {
    Exploit.create({
        ip: req.body.ip,
        port: req.body.port,
        exploit: req.body.exploit,
        jobID: req.body.jobID,
        user: req.session.user.handle
    },
    function(err, exploit) {
        if(err) {
            console.log(err);
            return res.status(500).send({"exploit": "could not create exploit attempt"});
        }
        else {
            return res.status(200).send(exploit);
        }
        
    });
});

router.put('/:id', authMiddleware.isAuthenticated, authMiddleware.hasRole("hacker"), function(req, res) {
    Exploit.findOneAndUpdate({jobID: req.params.id}, req.body, function(err, exploit) {
        if(err) return res.status(500).send({"error": "could not find exploit"});
        consolelog(res.body)
        return res.status(200).send(exploit);
    });
});

router.get('/', authMiddleware.isAuthenticated(), authMiddleware.hasRole('view'), function(req, res) {
    Exploit.find({}, function(err, exploits) {
        if(err) return res.status(500).send({"error": "could not retrieve exploit attempts"});
        return res.status(200).send(exploits);
    })
});

router.post('/Rule', authMiddleware.isAuthenticated(), authMiddleware.hasRole('hacker'), function(req, res) {
    ExploitRule.create({
        port: req.body.port,
        exploit: req.body.exploit,
        exploitOptions: req.body.exploitOptions
    },
    function(err, exploitRule) {
        if(err) {
            return res.status(500).send({"error": "could conto create exploit rule"});
        }
        return res.status(200).send(exploitRule);
    });
});

router.get('/Rule', authMiddleware.isAuthenticated(), authMiddleware.hasRole('hacker'), function(req, res) {
    ExploitRule.find({}, function(err, exploitRules) {
        if(err) {
            return res.status(500).send({"error": "could not retrieve exploit rules"});
        }
        return res.status(200).send(exploitRules);
    });
});

module.exports =router;